unit uFormPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Data.DB, Vcl.Grids,
  Vcl.DBGrids, Vcl.Menus, Vcl.StdCtrls, Vcl.ComCtrls;

type
  TFormPrincipal = class(TForm)
    Panel_Superior: TPanel;
    Panel_Centro: TPanel;
    Panel_Inferior: TPanel;
    DBGrid_Contas: TDBGrid;
    DS_Contas: TDataSource;
    Menu: TMainMenu;
    MenuArquivo: TMenuItem;
    MenuNovaConta: TMenuItem;
    MenuClientes: TMenuItem;
    Configurao1: TMenuItem;
    DataHoje: TDateTimePicker;
    lblDataAtual: TLabel;
    WN2018: TLabel;
    MenuAjuda: TMenuItem;
    Panel_Botoes: TPanel;
    lblMensagem: TLabel;
    btnVerVencidas: TButton;
    btnVerNotificacao: TButton;
    btnNotificar: TButton;
    btnApagarVencidas: TButton;
    Ajuda1: TMenuItem;
    MenuRegistro: TMenuItem;
    DS_Registro: TDataSource;
    procedure MenuClientesClick(Sender: TObject);
    procedure MenuNovaContaClick(Sender: TObject);
    procedure DBGrid_ContasDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid_ContasDblClick(Sender: TObject);
    procedure btnProcessarClick(Sender: TObject);
    procedure btnNotificarClick(Sender: TObject);
    procedure btnFeedbackClick(Sender: TObject);
    procedure Configurao1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnVerVencidasClick(Sender: TObject);
    procedure btnVerNotificacaoClick(Sender: TObject);
    procedure btnApagarVencidasClick(Sender: TObject);
    procedure MenuRegistroClick(Sender: TObject);
  private
    { Private declarations }
    procedure VerificarVencidas;
    procedure Notificar;
    procedure VerificarNotificacao;
    procedure ApagarVencidas;
    procedure VerificaRegistro;
    procedure ContaRegistrosBD;
  public
    { Public declarations }
  end;

var
  FormPrincipal: TFormPrincipal;

implementation

{$R *.dfm}

uses uFormClientes, uFormConta, dmDados, uEnviarEmailGmail, uFormConf,
  uFormRegistro;


procedure TFormPrincipal.ApagarVencidas;
var
  DataAtual : String;
begin
  DataAtual := DateToStr(DataHoje.Date);

  DS_Contas.DataSet.First;
  repeat
    with DBGrid_Contas do
      begin
        if (DS_Contas.DataSet.FieldByName('dt_vencimento').AsString = DataAtual) and (DS_Contas.DataSet.FieldByName('cliente_notificado').AsString ='SIM') then
          DS_Contas.DataSet.Delete
        else
            lblMensagem.Caption := 'Contas vencidas e notificadas foram apagadas!';
      end;
    DS_Contas.DataSet.Next;
  until DS_Contas.DataSet.Eof;


end;

procedure TFormPrincipal.btnApagarVencidasClick(Sender: TObject);
begin
  ApagarVencidas;
end;

procedure TFormPrincipal.btnFeedbackClick(Sender: TObject);
begin
  //FormEnviarEmail := TFormEnviarEmail.Create(Application);
  FormEnviarEmail.ShowModal;
end;

procedure TFormPrincipal.btnNotificarClick(Sender: TObject);
begin
  Notificar;
end;

procedure TFormPrincipal.btnProcessarClick(Sender: TObject);
begin
   VerificarVencidas;
end;

procedure TFormPrincipal.btnVerNotificacaoClick(Sender: TObject);
begin
  VerificarNotificacao;
end;

procedure TFormPrincipal.btnVerVencidasClick(Sender: TObject);
begin
  VerificarVencidas;
end;

procedure TFormPrincipal.Button1Click(Sender: TObject);
begin
    with DBGrid_Contas do
      begin

          DS_Contas.DataSet.Edit;
          DS_Contas.DataSet.Delete;

     end;
        DS_Contas.DataSet.Next;

end;

procedure TFormPrincipal.Configurao1Click(Sender: TObject);
begin
  //FormConf := TFormConf.Create(Application);
  FormConf.ShowModal;
end;

procedure TFormPrincipal.ContaRegistrosBD;
var
  Cont : Integer;
begin
  Cont := 0;

  try
    DS_Contas.DataSet.DisableControls;
    DS_Contas.DataSet.First;

    while not DS_Contas.DataSet.Eof do
      begin
        Cont:= Cont+1;
        DS_Contas.DataSet.Next;
      end;

    if Cont = 0 then
      Exit;

  except
   on E:Exception do
     ShowMessage('Erro ao contas registros '+e.Message);
  end;

  DS_Contas.DataSet.EnableControls;



end;

procedure TFormPrincipal.DBGrid_ContasDblClick(Sender: TObject);
begin
  FormConta.ShowModal;
end;

procedure TFormPrincipal.DBGrid_ContasDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
  DataAtual : String;
begin
  //Data atual do sistema
  DataAtual := DateToStr(DataHoje.Date);

  with DBGrid_Contas do
    begin
      //Destaca na Grid os registros que vencem na data atual do sistema
      //Os registros vencidos ficam em vermelho
      if DS_Contas.DataSet.FieldByName('dt_vencimento').AsString = DataAtual then
        begin
          if (gdSelected in State) then
            Canvas.Brush.Color := clRed
          else
              begin
                Canvas.Font.Style := [fsBold];
                Canvas.Font.Color := clRed;
              end;
        end;

      Canvas.FillRect(Rect);
      DefaultDrawColumnCell(Rect,DataCol,Column,State);
    end;


end;

procedure TFormPrincipal.FormShow(Sender: TObject);
begin
  DataHoje.Date := Date;

  VerificaRegistro;

  try
    ContaRegistrosBD;
  except
    on E:Exception do
      begin
        ShowMessage('Não existem registros neste banco de dados!');
        Abort;
      end;

  end;



  try
    btnVerVencidas.Click;

    btnVerNotificacao.Click;

    btnNotificar.Click;

    btnApagarVencidas.Click;
  except
    on E:Exception do
      ShowMessage('Ocorreu um erro: '+e.Message);
  end;


end;

procedure TFormPrincipal.MenuClientesClick(Sender: TObject);
begin
  //FormClientes := TFormClientes.Create(Application);
  FormClientes.ShowModal;
end;

procedure TFormPrincipal.MenuNovaContaClick(Sender: TObject);
begin
  //FormConta := TFormConta.Create(Application);
  FormConta.ShowModal;
end;

procedure TFormPrincipal.MenuRegistroClick(Sender: TObject);
begin
  FormRegistro.ShowModal;
end;

procedure TFormPrincipal.Notificar;
var
  DataAtual : String;
begin
  DataAtual := DateToStr(DataHoje.Date);

  DS_Contas.DataSet.First;

  repeat
    with DBGrid_Contas do
      begin
        if DS_Contas.DataSet.FieldByName('cliente_notificado').AsString = 'NÃO' then
          begin  {
          if (DS_Contas.DataSet.FieldByName('pode_notificar').AsString = 'S') and (DS_Contas.DataSet.FieldByName('dt_notificar').AsString = DataAtual) then
            begin
              DS_Contas.DataSet.Edit;
              FormConta.btnNotificar.Click;
              DS_Contas.DataSet.Delete;
            end
          else
              lblMensagem.Caption := 'Não existem registros para notificar!'; }

          if DS_Contas.DataSet.FieldByName('pode_notificar').AsString = 'S' then
            begin
              DS_Contas.DataSet.Edit;
              DS_Contas.DataSet.FieldByName('cliente_notificado').Text := 'SIM';
              FormConta.btnNotificar.Click;
              //DS_Contas.DataSet.Delete;
            end
          else
              lblMensagem.Caption := 'Não existem registros para notificar!';
          end
      end;

	  DS_Contas.DataSet.Next;

  until DS_Contas.DataSet.Eof;
	  DBGrid_Contas.Update;
end;


procedure TFormPrincipal.VerificaRegistro;
var
  LocalExecutavel : String;
begin
  LocalExecutavel := ExtractFilePath(ParamStr(0));

  if DS_Registro.DataSet.FieldByName('status_registro').AsString = 'Registrado' then
    begin
      if LocalExecutavel <> DS_Registro.DataSet.FieldByName('local_instalacao').AsString then
        begin
          ShowMessage('Foram feitas alterações nos arquivos do programa!');
          Application.Terminate;
        end;
    end
  else
      if DS_Registro.DataSet.FieldByName('status_registro').AsString = '' then
        begin
          FormRegistro.ShowModal;
        end;

end;

procedure TFormPrincipal.VerificarNotificacao;
var
  DataAtual : String;
begin
  DataAtual := DateToStr(DataHoje.Date);

  DS_Contas.DataSet.First;

  repeat
    DS_Contas.DataSet.Edit;
    with DBGrid_Contas do
      begin
        //DS_Contas.DataSet.Edit;
        //Se dt_vencimento for a mesma da data atual altera o pode_notificar para S=Sim
        if DS_Contas.DataSet.FieldByName('dt_notificar').AsString = DataAtual then
          DS_Contas.DataSet.FieldByName('pode_notificar').Text := 'S'
        else
          //Caso a data seja diferente ele altera para N=Não
          DS_Contas.DataSet.FieldByName('pode_notificar').Text := 'N';
      end;

    DS_Contas.DataSet.Next;

  until DS_Contas.DataSet.Eof;

  DBGrid_Contas.Update;

end;

procedure TFormPrincipal.VerificarVencidas;
var
  DtHoje : String;
begin
  DtHoje := DateToStr(DataHoje.Date);

  DS_Contas.DataSet.First;
  repeat
    //Abre o Dataset para edição
    DS_Contas.DataSet.Edit;

    with DBGrid_Contas do
		begin
			DS_Contas.DataSet.Edit;
			//Verifica se a dt de vencimento é a mesma da atual
			if (DS_Contas.DataSet.FieldByName('dt_vencimento').AsString = DtHoje) then
				//Muda a situação para vencida
				DS_Contas.DataSet.FieldByName('situacao_atual').Text := 'VENCIDA'
			else
				//Se a dt for diferente apenas altera para Ok
				DS_Contas.DataSet.FieldByName('situacao_atual').Text := 'Ok';
		end;
	DS_Contas.DataSet.Next;
  until DS_Contas.DataSet.Eof ;

  DBGrid_Contas.Update;
end;


end.
